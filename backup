#!/bin/bash


# NOTE: the exit code of this script is meaningless
# NOTE: the cleanup of the source and the repository mounts is pretty rigid
# however, this script itself does not catch any signals and might thus not clean up properly in case of exit signal

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail
SCRIPT_DIR="$(dirname "$(realpath "$BASH_SOURCE")")"


# parse config file
# must be in same folder as this script
cd "$SCRIPT_DIR"
source "./config.cfg"
export RESTIC_PASSWORD="$PASSWORD"
REPOSITORY="$(realpath "$REPOSITORY")"
SERVE_FUSE_MOUNT="$(realpath "$SERVE_FUSE_MOUNT")"




# ---- UTILS ----

log_err () { echo "ERROR: $1" >&2; }
log_warn () { echo "WARN: $1" >&2; }
log_info () { echo "$1"; }

send_telegram () {
    log_info "sending Telegram message"
    curl -X POST \
        --no-progress-meter \
        -H 'Content-Type: application/json' \
        -d "{\"chat_id\": $CHAT_ID, \"text\": \"${1}\"}" \
        https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
        >/dev/null
}

timestamp () {
    echo "$(date +"%Y-%m-%d %T")"
}

send_error () {
    send_telegram "❌ ${1}"
}

send_succ () {
    send_telegram "✅ ${1}"
}




# if exit signal is received, retval will be the exit code of the last command that exited
#    if backup was lauched, retval will be exit code of backup, because serve-fuse-mount always exits
#    otherwise, retval will likely be 0 and this script will say "finished without backing up"

exit_handler () {
    retval=$?

    # define handler for when cleanup fails
    # note that it is not possible trap EXIT inside of exit handler
    err_handler () {
        log_err "backup environment cleanup failed"
        send_error "backup environment cleanup failed"
        exit 1
    }
    trap err_handler ERR

    log_info ""
    if [[ ${IS_LAUNCHED+1} ]]; then
        if ((retval==255)); then
            log_err "error occurred or received exit signal"
            send_error "error occurred or received exit signal"
        elif ((retval==0)); then
            log_info "backup completed"
            send_succ "backup"
        else
            log_err "backup failed with code $retval"
            send_error "backup failed with code $retval"
        fi
    else
        if ((retval==0)); then
            # this means that either exit 0 was called or exit signal was received before the backup was started
            log_info "finished without backing up"
            send_succ "finished without backing up"
        else
            log_err "backup was not started: an error occurred"
            send_error "backup was not started: an error occurred"
        fi
    fi

    cleanup
    exit $retval
}

cleanup () {
    log_info "removing temporary backup environment"
    if [[ -d $ROOT/$SOURCE_NAME ]]; then rm -d "$ROOT/$SOURCE_NAME"; fi
    if [[ -d $ROOT/repository ]]; then rm -d "$ROOT/repository"; fi
    rm -rf "$ROOT"
}

trap exit_handler EXIT




# construct fake restic root dir
log_info "creating temporary backup environment"
ROOT="$(mktemp -d)"
mkdir "$ROOT"/{tmp,repository,"$SOURCE_NAME"}

# copy restic executable
restic_path="$(which restic)" && true
if (($?>0)); then log_err "could not locate restic"; exit 1; fi
cp "$(realpath "$restic_path")" "$ROOT/restic"

# construct command
cmd_1=(/restic -r /repository backup --ignore-inode /"$SOURCE_NAME")
cmd_2=(unshare -rR "$ROOT" "${cmd_1[@]}")
cmd_3=("$SERVE_FUSE_MOUNT/serve-rclone-mount" --mountpoint "$ROOT/$SOURCE_NAME" -- "$SOURCE" "${cmd_2[@]}")
cmd_4=("$SERVE_FUSE_MOUNT/serve-bindfs-mount" --mountpoint "$ROOT/repository" -- "$REPOSITORY" "${cmd_3[@]}")

# run the command
log_info ""
IS_LAUNCHED=1
"${cmd_4[@]}" && true
exit $?
